// https://leetcode.com/problems/robot-return-to-origin/

class Solution {
    public boolean judgeCircle(String moves) {
        int x = 0, y=0;
        for(int i = 0 ; i < moves.length(); i++) {
        	if(moves.charAt(i) == 'U') y++;
        	else if(moves.charAt(i) == 'D') y--;
        	else if(moves.charAt(i) == 'L') x--;
        	else if(moves.charAt(i) == 'R') x++;
        }
		return (x==0 && y==0);  
    }
}


//more optimized solution
class Solution {
    public boolean judgeCircle(String moves) {
       int[] arr=new int[26];
	       for(char ch:moves.toCharArray())
	       {
	           arr[ch-'A']++;
	       }
	        return arr['U'-'A']==arr['D'-'A'] && arr['L'-'A']==arr['R'-'A'];	    
    }
}
